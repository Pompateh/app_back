datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Studio {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  tagline          String?
  thumbnail        String?
  author           String?
  imageTitle       String?
  imageDescription String?
  openDays         String[]
  openHours        String?   // Make this field optional
  navigation       Json?     // Expected to be an array of objects matching NavItem
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sections         Section      @relation(fields: [sectionsId], references: [id])
  sectionsId       String
  // New fields
  slogan           String?
  portfolio        Json?
  fonts            Json?
  artworks         Json?
}

model Post {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  slug             String   @unique
  summary          String?
  featuredImage    String?
  publishedAt      DateTime?
  published       Boolean  @default(false) //
  type             String?
  authorName       String?
  authorJobTitle   String?
  postDate         DateTime?
  readingTime      String?
  content          String?
  version        Int      @default(1)
  isDraft        Boolean  @default(true)
  contentSources   String[]
  referencePicUrl  String?
  referencePicName String?
  additionalContent Json     @default("[]")
  quote            String?  // Ensure this field is present
  quoteAuthor      String?  // Ensure this field is present
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


model Project {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String         @unique
  blocks    ContentBlock[]
  thumbnail String?
  category  String?
  team      TeamMember[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  description String
}

enum BlockType {
  text
  image
  full_image       // corresponds to "full-image"
  side_by_side_image
  three_grid_layout
  text_and_side_image
}

model ContentBlock {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  type      BlockType

  // Single-text blocks
  text      String?
  layout    Layout?

  // Single-image blocks
  src       String?
  alt       String?

// Side-by-side, three-grid, and text-and-side-image blocks: store complex payloads as JSON
  data      Json?

  // Relations
  project   Project     @relation(fields: [projectId], references: [id])
  projectId String
}

enum Layout {
  left
  right
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  role      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}


model ShopProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @unique
  title       String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String?  // Optionally log which user triggered the event
  createdAt DateTime @default(now())
}


model Setting {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  key   String   @unique
  value String
}


model Asset {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String   // URL of the asset (could be local or S3)
  filename    String
  caption     String?  // Optional caption or alt text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Order {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderRef  String
  customer  String
  total     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

